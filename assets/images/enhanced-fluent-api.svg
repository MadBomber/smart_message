<svg width="900" height="600" xmlns="http://www.w3.org/2000/svg" style="background: transparent;">
  <defs>
    <style>
      .title { font: bold 18px sans-serif; fill: #e1e5e9; text-anchor: middle; }
      .label { font: 14px sans-serif; fill: #c9d1d9; text-anchor: middle; }
      .small-label { font: 12px sans-serif; fill: #8b949e; }
      .code-label { font: 11px monospace; fill: #f0f6fc; }
      .keyword { font: 11px monospace; fill: #ff7b72; font-weight: bold; }
      .string { font: 11px monospace; fill: #a5d6ff; }
      .comment { font: 11px monospace; fill: #8b949e; font-style: italic; }
      .box { fill: #21262d; stroke: #30363d; stroke-width: 2; rx: 8; }
      .code-box { fill: #0d1117; stroke: #a5a5ff; stroke-width: 2; rx: 6; }
      .result-box { fill: #161b22; stroke: #56d364; stroke-width: 2; rx: 6; }
      .chain-box { fill: #1a1d2e; stroke: #ffa657; stroke-width: 2; rx: 6; }
      .arrow { stroke: #58a6ff; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .chain-arrow { stroke: #ffa657; stroke-width: 2; fill: none; marker-end: url(#arrowhead-orange); }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#58a6ff" />
    </marker>
    <marker id="arrowhead-orange" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#ffa657" />
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="450" y="30" class="title">Redis Enhanced Transport: Fluent API</text>
  
  <!-- Basic Fluent API Examples -->
  <text x="450" y="65" class="label">Fluent API Pattern Building</text>
  
  <!-- Example 1: Simple from() -->
  <rect x="50" y="80" width="350" height="40" class="code-box"/>
  <text x="60" y="100" class="code-label">transport.</text>
  <text x="130" y="100" class="keyword">where</text>
  <text x="170" y="100" class="code-label">.</text>
  <text x="180" y="100" class="keyword">from</text>
  <text x="210" y="100" class="code-label">(</text>
  <text x="220" y="100" class="string">'web-app'</text>
  <text x="280" y="100" class="code-label">).</text>
  <text x="300" y="100" class="keyword">subscribe</text>
  <text x="60" y="115" class="comment"># Pattern: *.web-app.*</text>
  
  <rect x="450" y="80" width="200" height="40" class="result-box"/>
  <text x="460" y="100" class="small-label">Generated Pattern:</text>
  <text x="460" y="115" class="code-label">*.web-app.*</text>
  
  <!-- Arrow -->
  <line x1="400" y1="100" x2="450" y2="100" class="arrow"/>
  
  <!-- Example 2: Combined from() and to() -->
  <rect x="50" y="140" width="350" height="40" class="code-box"/>
  <text x="60" y="160" class="code-label">transport.</text>
  <text x="130" y="160" class="keyword">where</text>
  <text x="170" y="160" class="code-label">.</text>
  <text x="180" y="160" class="keyword">from</text>
  <text x="210" y="160" class="code-label">(</text>
  <text x="220" y="160" class="string">'api'</text>
  <text x="250" y="160" class="code-label">).</text>
  <text x="270" y="160" class="keyword">to</text>
  <text x="290" y="160" class="code-label">(</text>
  <text x="300" y="160" class="string">'db'</text>
  <text x="320" y="160" class="code-label">).</text>
  <text x="340" y="160" class="keyword">subscribe</text>
  <text x="60" y="175" class="comment"># Pattern: *.api.db</text>
  
  <rect x="450" y="140" width="200" height="40" class="result-box"/>
  <text x="460" y="160" class="small-label">Generated Pattern:</text>
  <text x="460" y="175" class="code-label">*.api.db</text>
  
  <!-- Arrow -->
  <line x1="400" y1="160" x2="450" y2="160" class="arrow"/>
  
  <!-- Example 3: Complex type, from, to -->
  <rect x="50" y="200" width="400" height="40" class="code-box"/>
  <text x="60" y="220" class="code-label">transport.</text>
  <text x="130" y="220" class="keyword">where</text>
  <text x="170" y="220" class="code-label">.</text>
  <text x="180" y="220" class="keyword">type</text>
  <text x="210" y="220" class="code-label">(</text>
  <text x="220" y="220" class="string">'Order'</text>
  <text x="260" y="220" class="code-label">).</text>
  <text x="280" y="220" class="keyword">from</text>
  <text x="310" y="220" class="code-label">(</text>
  <text x="320" y="220" class="string">'web'</text>
  <text x="350" y="220" class="code-label">).</text>
  <text x="370" y="220" class="keyword">subscribe</text>
  <text x="60" y="235" class="comment"># Pattern: order.web.*</text>
  
  <rect x="500" y="200" width="200" height="40" class="result-box"/>
  <text x="510" y="220" class="small-label">Generated Pattern:</text>
  <text x="510" y="235" class="code-label">order.web.*</text>
  
  <!-- Arrow -->
  <line x1="450" y1="220" x2="500" y2="220" class="arrow"/>
  
  <!-- Chaining Visualization -->
  <rect x="50" y="280" width="800" height="160" class="box"/>
  <text x="450" y="305" class="label">Method Chaining Visualization</text>
  
  <!-- Step-by-step chain -->
  <rect x="70" y="320" width="100" height="30" class="chain-box"/>
  <text x="120" y="340" class="code-label">transport</text>
  
  <rect x="200" y="320" width="80" height="30" class="chain-box"/>
  <text x="240" y="340" class="keyword">.where</text>
  
  <rect x="310" y="320" width="110" height="30" class="chain-box"/>
  <text x="365" y="340" class="code-label">.from('api')</text>
  
  <rect x="450" y="320" width="100" height="30" class="chain-box"/>
  <text x="500" y="340" class="code-label">.to('db')</text>
  
  <rect x="580" y="320" width="100" height="30" class="chain-box"/>
  <text x="630" y="340" class="keyword">.subscribe</text>
  
  <!-- Chain arrows -->
  <line x1="170" y1="335" x2="200" y2="335" class="chain-arrow"/>
  <line x1="280" y1="335" x2="310" y2="335" class="chain-arrow"/>
  <line x1="420" y1="335" x2="450" y2="335" class="chain-arrow"/>
  <line x1="550" y1="335" x2="580" y2="335" class="chain-arrow"/>
  
  <!-- Builder state progression -->
  <text x="120" y="365" class="small-label">Start</text>
  <text x="240" y="365" class="small-label">Builder</text>
  <text x="365" y="365" class="small-label">+ from</text>
  <text x="500" y="365" class="small-label">+ to</text>
  <text x="630" y="365" class="small-label">Execute</text>
  
  <text x="120" y="380" class="comment">Initial state</text>
  <text x="240" y="380" class="comment">Pattern: *.*.*</text>
  <text x="365" y="380" class="comment">*.api.*</text>
  <text x="500" y="380" class="comment">*.api.db</text>
  <text x="630" y="380" class="comment">Subscribe!</text>
  
  <!-- Advanced Examples -->
  <rect x="50" y="460" width="800" height="120" class="box"/>
  <text x="450" y="485" class="label">Advanced Fluent API Patterns</text>
  
  <!-- Multi-condition example -->
  <text x="70" y="510" class="small-label">Multi-condition Routing:</text>
  <text x="70" y="530" class="code-label">transport.where.from('monitoring').to('admin-panel').type('AdminAlert').subscribe</text>
  <text x="70" y="545" class="comment"># Matches: adminalert.monitoring.admin-panel</text>
  
  <!-- Broadcasting example -->
  <text x="70" y="565" class="small-label">Broadcasting Pattern:</text>
  <text x="70" y="585" class="code-label">transport.where.to('broadcast').subscribe</text>
  <text x="70" y="560" class="comment"># Matches all broadcast messages: *.*.broadcast</text>
</svg>